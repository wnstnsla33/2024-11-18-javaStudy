/*
 * 1. 변수 : 데이터형(메모리에 저장하는 크기)
 * ===================
 * 데이터 저장 : 메모리에 저장 -> RAM (프로그램 종료시에 사라짐)
 * 		-> 파일 / DBMS (오라클) => 공유데이터
 * 2. 사용자 요청 따라 처리 (데이터 처리)
 * 		-> 연산자/제어문
 * 3. 여러개를 동시에 저장
 * 		-> 같은 데이터만 저장 (정수,실수..)
 * 		-> 다른 데이터만 저장 : 클래스 
 * 				| 재사용 (수정 추가)
 * 4. 데이터를 모아서 관리 : 배열,클라스
 * 	  명령문을 모아서 관리
 *    =============== 메소드
 * 5. 객체 지향 프로그램
 * 	  = 가독성
 * 	  = 재사용성
 * 	  = 최적화
 * 6. 예외처리 : 종료하지 않는 프로그램
 * ==================================
 * 7. 라이브러리 : 자바에서 지원하는 기능(클래스/메소드)
 * 		IO/ 네트워크
 * 		============= web 프로그램
 * 8. 미니프로젝트 : 파일기반
 * 2page
 * ================
 *  => 프로그램 언어 : c/c++,java,c#,Python....
 *  	============
 *  		자바언어는 프로그램만 인식하는 언어 -> 컴퓨터는 모름
 *  		 -> 컴퓨터가 인식할 수 있게 변경 -> 컴파일
 *  => c/c++ => A.c ===> A.obj ===> A.exe
 *  => java => A.java ==> A.class ==> 화면 출력   
 *     - 모든 운영체제에서 동일하게 사용
 *     ** 이클립스는 코딩시마다 자동 컴파일이 됨(바로 에러 출력)
 *     			
 *  =============
 *  6p : 개발 환경 구축
 *  1.JDK -> jdk.java.net/17 (다운로드 위치)
 *   	-> oracle / openjdk(무료)
 *   	-> 스프링 프레임워크 -> 11버전까지 사용가능
 *   	-> spring -boot -> 17버전이후 
 *   	-> 버전 호환 단점
 *  2. 환경 설정
 *  	내 pc - 환경 변수 설정 - 시스템 변수 
 *  	-> classpath
 *  	-> path
 *  3.편집기 
 *  	-> 이클립스
 *  	-> 인텔리J     
 *  
 *  =================
 *  주의점
 *  1. 대소문자를 구분
 *   **자바 개발자의 약속
 *   	1) 클래스명은 대소문자로 시작
 *   	2) 변수/메소드 소문자로 시작
 *   	3) 상수 전체를 대문자
 *   	4) 가급적이면 의미를 부여	
 *	2. 문장이 죵료(명령어) => ; =>.
 *
 *  3. 변수 : 변경이 가능
 *     상수 : 변경이 불가능(final)
 *     리터럴 : 실제 저장된 값
 *     age =20;
 *  4. 들여쓰기 (ctrl + shift + f)
 * =================
 * 23p 자바의 구성요소
 * public class 자바소개_특징  > 클래스 시작
{ 프로그램 시작점 > 모든 프로그램은 반드시  main 1개가 존재
	public static void main(String[] args) { 메소드 시작
		System.out.println("Hello");

	}메소드 종료

}    클래스 종료
 *     
 *     
 * 
 */

public class 자바소개_특징 {

	public static void main(String[] args) {
		System.out.println("Hello");
		System.out.println("Hello");
		System.out.println("Hello");
		System.out.println("Hello");
		System.out.println("Hello");
		System.out.println("Hello");
	}

}
